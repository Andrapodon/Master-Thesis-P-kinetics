# Results

```{r setup}
#| include: false
suppressPackageStartupMessages({
  library(multcomp)
  library(car)
  library(tidyr)
  library(lme4)
  library(ggplot2)
  library(ggtext)
  library(ggpmisc)
  library(nlme)
  library(latex2exp)
  library(kableExtra)
  library(broom)
  library(dplyr)
  library(MuMIn)
  library(latex2exp)
})

options(warn = -1)
#RES <- readRDS("~/Documents/Master Thesis/Master-Thesis-P-kinetics/data/RES.rds")
#D <- RES$D
#d <- RES$data
load("~/Documents/Master Thesis/Master-Thesis-P-kinetics/data/results_coefficient_analysis")
```

```{r}
create_coef_table <- function(lmer_models, 
                              covariate_order = NULL, 
                              covariate_labels = NULL, # NEU: Benannter Vektor für Zeilennamen
                              model_labels = NULL,
                              descriptor = "Response") {   # NEU: Benannter Vektor für Spaltennamen

  # Extract coefficients and p-values (Ihre Originalfunktion, keine Änderung hier)
  extract_coef_info <- function(model) {
    # ... (keine Änderung, Ihr Code bleibt hier)
    coef_matrix <- summary(model)|> coef()
    estimates <- coef_matrix[, 1]
    p_values <- coef_matrix[, ncol(coef_matrix)]
    formatted_coef <- sapply(seq_along(estimates), function(i) {
      est_str <- sprintf("%.3f", estimates[i])
      stars <- if (p_values[i] < 0.001) "***" else
               if (p_values[i] < 0.01) "** " else
               if (p_values[i] < 0.05) "* " else  ""
      paste0(est_str,stars)
    })
    names(formatted_coef) <- rownames(coef_matrix)
    return(formatted_coef)
  }

  # Extract R-squared values (Ihre Originalfunktion, keine Änderung hier)
  extract_r_squared <- function(model) {
    # ... (keine Änderung, Ihr Code bleibt hier)
    r2_values <- MuMIn::r.squaredGLMM(model) # MuMIn:: hinzugefügt für Klarheit
    return(c(
      R2m = sprintf("%.3f", r2_values[1, "R2m"]),
      R2c = sprintf("%.3f", r2_values[1, "R2c"])
    ))
  }

  # Daten extrahieren (Ihr Originalcode)
  all_coefs <- lapply(lmer_models, extract_coef_info)
  all_r_squared <- lapply(lmer_models, extract_r_squared)
  all_covariate_names <- unique(unlist(lapply(all_coefs, names)))

  if (is.null(covariate_order)) {
    covariate_order <- c("(Intercept)", sort(all_covariate_names[all_covariate_names != "(Intercept)"]))
  }
  covariate_order <- covariate_order[covariate_order %in% all_covariate_names]
  final_order <- c(covariate_order, "R2m", "R2c")

  # Matrix erstellen (Ihr Originalcode)
  results_matrix <- matrix("",
                           nrow = length(final_order),
                           ncol = length(lmer_models),
                           dimnames = list(final_order, names(lmer_models)))

  # Matrix füllen (Ihr Originalcode)
  for (model_name in names(lmer_models)) {
    model_coefs <- all_coefs[[model_name]]
    for (covar in names(model_coefs)) {
      if (covar %in% covariate_order) {
        results_matrix[covar, model_name] <- model_coefs[covar]
      }
    }
    r2_values <- all_r_squared[[model_name]]
    results_matrix["R2m", model_name] <- r2_values["R2m"]
    results_matrix["R2c", model_name] <- r2_values["R2c"]
  }

  # --- NEU: Zeilen- und Spaltennamen ersetzen ---
  
  # Ersetze die Zeilennamen (Kovariaten), falls covariate_labels übergeben wurde
  if (!is.null(covariate_labels)) {
    # Finde die Übereinstimmungen in den aktuellen Zeilennamen
    row_matches <- match(rownames(results_matrix), names(covariate_labels))
    # Ersetze nur die, die gefunden wurden
    new_rownames <- rownames(results_matrix)
    new_rownames[!is.na(row_matches)] <- covariate_labels[row_matches[!is.na(row_matches)]]
    rownames(results_matrix) <- new_rownames
  }
  
  # Ersetze die Spaltennamen (Modelle), falls model_labels übergeben wurde
  if (!is.null(model_labels)) {
    col_matches <- match(colnames(results_matrix), names(model_labels))
    new_colnames <- colnames(results_matrix)
    new_colnames[!is.na(col_matches)] <- model_labels[col_matches[!is.na(col_matches)]]
    colnames(results_matrix) <- new_colnames
  }
  
  # --- Ende der neuen Sektion ---

  # Convert to data frame for kable
  results_df <- data.frame("Predictor/Model" = rownames(results_matrix),
                           results_matrix,
                           check.names = FALSE, # Verhindert, dass R Spaltennamen ändert
                           stringsAsFactors = FALSE)
  
  results_df
}
```

The results of this study are presented in two main parts. First, the development and validation of the phosphorus (P) desorption kinetic model are detailed, justifying the final modeling approach. Second, the descriptive trends of both agronomic outcomes and soil P parameters in response to long-term fertilization and site differences are explored visually. Finally, the predictive power of the kinetic and standard P parameters is formally evaluated using linear mixed-effects models.

## Establishment of the P-Desorption Kinetic Model

The primary goal was to derive two key parameters for each soil sample: the desorbable P pool ($P_{desorb}$) and the rate constant ($k$). The analysis proceeded in two stages: an initial test of a linearized model, followed by the implementation of a more robust non-linear model.

### Initial Approach: Failure of the Linearized Model

Following the conceptual framework of Flossmann and Richter (1982), the first-order kinetic equation was linearized. A core assumption of this model is that the linear relationship must pass through the origin. To test this, linear models were fitted to the transformed data for each sample individually. The results revealed a systematic failure of this assumption, as the estimated intercepts for the majority of samples were highly significantly different from zero (p \< 0.05). This consistent statistical deviation indicated that the linearized approach was not a valid representation of the data. The visual evidence in @fig-linearized-model supports this conclusion.

```{r}
#| label: fig-linearized-model
#| fig-cap: "Test of the linearized first-order kinetic model. The plot visually supports the statistical finding that many intercepts are not zero."
#| echo: false
#| warning: false
#| message: false
#| out-width: "\\textwidth"
#| fig-height: 4

  ggplot(d[d$Treatment!="P100"&(d$Repetition==1|d$Repetition==2),], aes(y=Y1, x=t.min., col = Repetition)) +
   geom_point() +
   facet_grid(Site ~ Treatment) +
   theme_bw() +
   labs(x=TeX("$Time (min)$"),
        y=TeX("$ln(1-\\frac{P}{P_S})$")) +
   geom_smooth(method="lm", alpha = 0.3)
```

### Final Approach: Successful Non-Linear Model

Given the statistical failure of the linearized model, a direct non-linear modeling approach was adopted to estimate both $P_{desorb}$ and $k$ simultaneously from the untransformed data. This approach does not rely on the assumption of a zero intercept and proved to be far more successful, accurately capturing the curvilinear shape of the desorption data for nearly all samples (fig-nonlinear-model). The final parameters were extracted from a non-linear mixed-effects model (`nlme`) to account for the hierarchical data structure. **These final `nlme`-derived coefficients were used for all subsequent analyses.**

```{r}
#| label: fig-nonlinear-model
#| fig-cap: "Non-linear first-order kinetic model fits for P desorption over time. Points represent measured data and solid lines represent the fitted model for each replicate."
#| echo: false
#| warning: false
#| message: false
#| out-width: "\\textwidth"
#| fig-height: 6

 # Recreate d_plot and pred_data as in your pretest.qmd
Res <- nlsList(Pv.mg.L. ~ PS * (1 - exp(-k * (t.dt))) | uid, d[, c("Pv.mg.L.", "uid", "t.dt")],  start=list(PS=0.1,k=0.2))
# summary(Res)
# d$nls_pred <- predict(Res)

# Extract coefficients from the nlsList results
nls_coefs <- coef(Res)
nls_coefs$uid <- rownames(nls_coefs)

# Merge coefficients back to the main dataset
d_plot <- merge(d, nls_coefs, by = "uid")

# Most straightforward approach - create curves manually
time_seq <- seq(min(d$t.dt, na.rm = TRUE), max(d$t.dt, na.rm = TRUE), length.out = 100)

# Create prediction data
pred_data <- d_plot %>%
  select(uid, Site, Treatment, Repetition, PS, k) %>%
  distinct() %>%
  crossing(t.dt = time_seq) %>%
  mutate(pred_Pv = PS * (1 - exp(-k * (t.dt))))

 p1 <- ggplot() +
   geom_point(data = d_plot, aes(y = Pv.mg.L., x = t.dt, col = Repetition)) +
   geom_line(data = pred_data, aes(x = t.dt, y = pred_Pv, col = Repetition), size = 0.5) +
   facet_grid(Treatment ~ Site,scales = "free_y") +
   theme_bw() +
   labs(x = TeX("$Time (min)$"),
        y = TeX("$P_{V}(\\frac{mg}{L})$"));
 suppressWarnings(print(p1))
```


## Comparison with Isotopic Exchange Kinetics (IEK) {#sec-comparison-with-isotopic-exchange-kinetics-(iek}

To validate the newly derived kinetic parameters against an established benchmark, the capacity ($P_{desorb}$) and kinetic ($k$) parameters were compared to data from Isotopic Exchange Kinetics (IEK) studies previously conducted on the same long-term trial sites by Demaria et al. (2013). This comparison aims to determine if the simpler, non-equilibrium desorption method used in this thesis captures similar aspects of soil P dynamics as the more complex, equilibrium-based IEK method.

The size of the desorbable P pool ($P_{desorb}$) was compared against the long-term isotopically exchangeable P pool measured after 7 days ($E_{7d}$). The desorption rate constant ($k$) was compared against the IEK kinetic parameter measured after 24 hours ($n_{1d}$). Spearman's rank correlation was used to robustly test for monotonic trends between the different methods.

```{r}
#| label: fig-iek-comparison
#| fig-cap: "Correlation between desorption-derived kinetic parameters and IEK-derived parameters. (A) Capacity parameters: Desorbable P ($P_{\\text{desorb}}$) vs. Isotopically Exchangeable P ($E_{\\text{7d}}$). (B) Kinetic parameters: Rate Constant ($k$) vs. IEK kinetic parameter ($n_{\\text{1d}}$)."
#| echo: false
#| warning: false
#| message: false
#| out-width: "\\textwidth"
#| fig-height: 4
#| fig-subcap: 
#|   - "Capacity: $P_{\\text{desorb}}$ vs $E_{\\text{7d}}$"
#|   - "Kinetics: k vs $n_{\\text{1d}}$"
#| layout-ncol: 2
#| dev: tikz

library(ggplot2)
library(dplyr)
library(latex2exp)

# Step 1: Prepare the data for correlation analysis
correlation_data <- D %>%
  select(uid, PS, k, E_exp_10080, n_1440) %>%
  na.omit()

# Step 2: Perform the formal correlation tests
spearman_capacity <- cor.test(correlation_data$PS, correlation_data$E_exp_10080, method = "spearman")
spearman_kinetic <- cor.test(correlation_data$k, correlation_data$n_1440, method = "spearman")

# Step 3: Create the plots

# Plot A: Capacity Comparison
p1 <- ggplot(correlation_data, aes(x = E_exp_10080, y = PS)) +
  geom_point(size = 3, alpha = 0.7) +
  geom_smooth(method = "lm", se = FALSE, color = "blue", formula = y ~ x) +
  labs(
    x = TeX("Isotopically Exchangeable P, $E_{7d}$ (mg kg$^{-1}$)"),
    y = TeX("Desorbable P, $P_{desorb}$ (mg L$^{-1}$)")
  ) +
  theme_bw()

# Plot B: Kinetic Comparison
p2 <- ggplot(correlation_data, aes(x = n_1440, y = k)) +
  geom_point(size = 3, alpha = 0.7) +
  geom_smooth(method = "lm", se = FALSE, color = "blue", formula = y ~ x) +
  labs(
    x = TeX("IEK Kinetic Parameter, $n_{1d}$"),
    y = TeX("Desorption Rate Constant, $k$ (min$^{-1}$)")
  ) +
  theme_bw()

# Display plots side-by-side (this is handled by the chunk options)
p1
p2
```

The analysis revealed a statistically significant, moderate positive correlation between the capacity parameters, $P_{desorb}$ and $E_{7d}$ (fig-iek-comparison). The Spearman's rank correlation coefficient was `r round(spearman_capacity$estimate, 2)` with a p-value of `r format.pval(spearman_capacity$p.value, eps = 0.001)`.

Similarly, a statistically significant, moderate positive correlation was found between the kinetic parameters, $k$ and $n_{1d}$ (fig-iek-comparison). The Spearman's rank correlation coefficient was `r round(spearman_kinetic$estimate, 2)` with a p-value of `r format.pval(spearman_kinetic$p.value, eps = 0.001)`.

These results indicate that the simpler, non-equilibrium desorption method used in this study successfully captures both the capacity and intensity aspects of soil P lability, providing results that are consistent with the more complex, equilibrium-based IEK method reported by Demaria et al. (2013).

## Effects of Fertilization on Agronomic and Soil Parameters {#sec-effects-of-fertilization-on-agronomic-and-soil-parameters}

Having established a robust method to determine the kinetic parameters, the next step was to explore the effects of the long-term P fertilization treatments on both the agronomic outcomes and the soil P test parameters.

### Agronomic Responses to P Fertilization {#sec-agronomic-responses-to-p-fertilization}

The long-term application of different P fertilization levels had a pronounced impact on the primary agronomic outcomes, including two different metrics for yield, P Uptake ($P_{up}$), and P Balance ($P_{bal}$), though the response varied considerably between sites (@fig-agronomic-responses).

```{r}
#| label: fig-agronomic-responses
#| fig-cap: "Agronomic response variables across six P fertilization treatments and six experimental sites. Data from 2017-2022."
#| echo: false
#| warning: false
#| message: false
#| out-width: "\\textwidth"
#| fig-height: 7

# Final corrected plotting code
D_long_agronomic <- D %>%
  select(Site, Treatment, Ymain_norm, Ymain_rel, annual_P_uptake, annual_P_balance) %>%
  mutate(Ymain_norm = Ymain_norm * 100) %>% 
  pivot_longer(
    cols = c(Ymain_norm, Ymain_rel, annual_P_uptake, annual_P_balance),
    names_to = "Variable",
    values_to = "Value"
  )

D_long_agronomic <- D_long_agronomic %>%
  mutate(Variable = case_when(
    Variable == "Ymain_norm"       ~ as.character(TeX("$Y_{norm}$ (\\%)")),
    Variable == "Ymain_rel"        ~ as.character(TeX("$Y_{rel}$ (\\%)")),
    Variable == "annual_P_uptake"  ~ as.character(TeX("$P_{up}$ (kg ha$^{-1}$)")),
    Variable == "annual_P_balance" ~ as.character(TeX("$P_{bal}$ (kg ha$^{-1}$)")),
    TRUE                           ~ Variable
  )) %>%
  mutate(Variable = factor(Variable, levels = c(
    as.character(TeX("$Y_{norm}$ (\\%)")),
    as.character(TeX("$Y_{rel}$ (\\%)")),
    as.character(TeX("$P_{up}$ (kg ha$^{-1}$)")),
    as.character(TeX("$P_{bal}$ (kg ha$^{-1}$)"))
  )))

ggplot(D_long_agronomic, aes(x = Treatment, y = Value, fill = Treatment)) +
  geom_boxplot(alpha = 0.7) +
  facet_grid(Variable ~ Site, scales = "free_y", labeller = label_parsed) +
  labs(x = "P Fertilization Treatment", y = "Value") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")
```

**Yield Metrics (**$Y_{norm}$ and $Y_{rel}$): Both yield metrics showed a generally positive response to P fertilization. The site-normalized yield ($Y_{norm}$) shows the response relative to the site's potential for that year, with most yields plateauing around the Norm (100%) treatment. The national-normalized yield ($Y_{rel}$) provides a broader context, showing how yields at each site compare to the national average.

**P Uptake (**$P_{up}$): P uptake by crops followed a similar trend to yield, increasing with fertilization, often continuing to increase at the highest fertilization levels, suggesting luxury consumption.

**P Balance (**$P_{bal}$): The P balance showed a strong, linear relationship with fertilization. The Zero and Deficit treatments resulted in a negative balance (mining soil P), while the Elevated and Surplus treatments led to a significant P surplus.

### Soil P Parameters as a Function of P Fertilization {#sec-soil-p-parameters-as-a-function-of-p-fertilization}

The different soil P test parameters, including the standard STP methods and the newly derived kinetic parameters, all responded to the long-term fertilization treatments (@fig-soil-parameters).

```{r}
#| label: fig-soil-parameters
#| fig-cap: "Soil P parameters across six P fertilization treatments and six experimental sites."
#| echo: false
#| warning: false
#| message: false
#| out-width: "\\textwidth"
#| fig-height: 7

# Final corrected plotting code
D_long_soil <- D %>%
  select(Site, Treatment, k, PS, kPS, soil_0_20_P_CO2, soil_0_20_P_AAE10) %>%
  pivot_longer(
    cols = -c(Site, Treatment),
    names_to = "Variable",
    values_to = "Value"
  )

D_long_soil <- D_long_soil %>%
  mutate(Variable = case_when(
    Variable == "k"                   ~ as.character(TeX("$k$ (min$^{-1}$)")),
    Variable == "PS"                  ~ as.character(TeX("$P_{desorb}$ (mg L$^{-1}$)")),
    Variable == "kPS"                 ~ as.character(TeX("$J_0$ (mg L$^{-1}$ min$^{-1}$)")),
    Variable == "soil_0_20_P_CO2"   ~ as.character(TeX("$P_{CO_2}$ (mg kg$^{-1}$)")),
    Variable == "soil_0_20_P_AAE10" ~ as.character(TeX("$P_{AAE10}$ (mg kg$^{-1}$)")),
    TRUE                              ~ Variable
  )) %>%
  mutate(Variable = factor(Variable, levels = c(
    as.character(TeX("$k$ (min$^{-1}$)")),
    as.character(TeX("$P_{desorb}$ (mg L$^{-1}$)")),
    as.character(TeX("$J_0$ (mg L$^{-1}$ min$^{-1}$)")),
    as.character(TeX("$P_{CO_2}$ (mg kg$^{-1}$)")),
    as.character(TeX("$P_{AAE10}$ (mg kg$^{-1}$)"))
  )))

ggplot(D_long_soil, aes(x = Treatment, y = Value, fill = Treatment)) +
  geom_boxplot(alpha = 0.7) +
  facet_grid(Variable ~ Site, scales = "free_y", labeller = label_parsed) +
  labs(x = "P Fertilization Treatment", y = "Parameter Value") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")
```

**Standard STPs (**$P_{CO_2}$ and $P_{AAE10}$): Both standard soil P tests showed a clear and consistent increase with rising P fertilization levels across all sites, confirming their sensitivity to management.

**Kinetic Parameters (**$k$, $P_{desorb}$, and $J_0$): \* **Desorbable P (**$P_{desorb}$): This parameter behaved very similarly to the standard STPs, increasing steadily with P fertilization and confirming its role as a "capacity" indicator. \* **Rate Constant (**$k$): The rate constant showed a more complex pattern, with no strong, consistent trend with fertilization. This suggests that while fertilization increases the *amount* of available P, it may not change the intrinsic *release rate*. \* **Initial P Flux (**$J_0$): As the product of $P_{desorb}$ and $k$, this parameter integrates both capacity and intensity. It showed a strong positive response to fertilization, driven primarily by the increase in $P_{desorb}$.

These initial observations suggest that the kinetic parameters, particularly the rate constant $k$, may provide unique information about the soil's P dynamics not captured by static tests alone. The next section will use formal statistical models to test these relationships.


## Predicting P Parameters from Soil Properties {#sec-p-params-soil-props}

To understand the underlying drivers of the standard and kinetic P parameters, and to test **Hypotheses 1b and 2b**, a series of linear mixed-effects models were fitted. Each model predicted one of the P parameters based on the core soil properties: organic carbon ($C_{org}$), clay content, silt content, pH, and dithionite-extractable Al ($Al_d$) and Fe ($Fe_d$). The results are summarized in @tbl-soil-prop-models.

```{r}
#| label: tbl-soil-prop-models
#| tbl-cap: "Results of linear mixed-effects models predicting P parameters from intrinsic soil properties. Significance codes: '***' p < 0.001, '**' p < 0.01, '*' p < 0.05."
#| echo: false
#| warning: false
#| message: false

fit.soil.PS  <- lmer(log(PS)     ~ soil_0_20_clay+ soil_0_20_pH_H2O + soil_0_20_Corg + soil_0_20_silt + Fed + Ald  + (1|year) + (1|Site)  + (1|Site:block) + (1|Site:Treatment), D)
# fit.soil.PS2 <- lmer(log(PS)     ~ soil_0_20_clay+ soil_0_20_pH_H2O + soil_0_20_Corg + soil_0_20_silt  + (1|year) + (1|Site)  + (1|Site:block) + (1|Site:Treatment), D)
fit.soil.k   <- lmer(k           ~ soil_0_20_clay+ soil_0_20_pH_H2O + soil_0_20_Corg + soil_0_20_silt + Fed + Ald + (1|year) + (1|Site)  + (1|Site:block) + (1|Site:Treatment), D)
fit.soil.kPS <- lmer(I(log(k*PS))~ soil_0_20_clay+ soil_0_20_pH_H2O + soil_0_20_Corg + soil_0_20_silt + Fed + Ald + (1|year) + (1|Site)  + (1|Site:block) + (1|Site:Treatment), D)
fit.soil.kPS2<- lmer(I(k*log(PS))~ soil_0_20_clay+ soil_0_20_pH_H2O + soil_0_20_Corg + soil_0_20_silt + Fed + Ald + (1|year) + (1|Site)  + (1|Site:block) + (1|Site:Treatment), D)
fit.soil.CO2 <- lmer(log(soil_0_20_P_CO2)~ soil_0_20_clay+ soil_0_20_pH_H2O + soil_0_20_Corg + soil_0_20_silt + Fed + Ald + (1|year) + (1|Site)  + (1|Site:block) + (1|Site:Treatment), D)
fit.soil.AAE10<-lmer(log(soil_0_20_P_AAE10)~ soil_0_20_clay+ soil_0_20_pH_H2O + soil_0_20_Corg + soil_0_20_silt + Fed + Ald + (1|year) + (1|Site)  + (1|Site:block) + (1|Site:Treatment), D)






lmer_models_soil <- list(
  "m.PS" = fit.soil.PS,
  "m.k" = fit.soil.k,
  "m.log(k*PS)" = fit.soil.kPS,
  "m.PCO2" = fit.soil.CO2,
  "m.PAAE10" = fit.soil.AAE10
)
covariate_labels_soil_props <- c(
  "(Intercept)" = "Intercept",
  "soil_0_20_Corg" = "$C_{org}$",
  "soil_0_20_clay" = "Clay",
  "soil_0_20_silt" = "Silt",
  "soil_0_20_pH_H2O" = "pH",
  "Fed" = "$Fe_{d}$",
  "Ald" = "$Al_{d}$",
  "R2m" = "$R^2_m$",
  "R2c" = "$R^2_c$"
)
model_labels_soil <- c(
  "m.PCO2" = "$P_{CO_2}$",
  "m.PAAE10" = "$P_{AAE10}$",
  "m.PS" = "$P_{desorb}$",
  "m.k" = "$k$",
  "m.log(k*PS)" = "$J_0$"
)
results_table_soil <- create_coef_table(
  lmer_models_soil,
  covariate_labels = covariate_labels_soil_props,
  model_labels = model_labels_soil
)
knitr::kable(results_table_soil, escape = FALSE, row.names = FALSE, format = "markdown")


# Gemini, these are the results.
# |descriptor |$P_{desorb}$ |$k$       |$J_0$     |$P_{CO_2}$ |$P_{AAE10}$ |
# |:----------|:------------|:---------|:---------|:----------|:-----------|
# |Intercept  |21.444       |0.454     |21.189    |14.014     |23.126      |
# |$Al_{d}$   |-8.706***    |-0.072*** |-8.631*** |-4.417***  |-9.473***   |
# |$Fe_{d}$   |-1.068***    |0.005     |-1.084*** |-0.845***  |-0.606***   |
# |Clay       |-0.006***    |-0.016*** |-0.085*** |0.015      |-0.029***   |
# |$C_{org}$  |0.612        |0.137     |1.250     |0.269      |1.454       |
# |pH         |-0.018***    |-0.021*** |-0.092*** |0.124      |0.012       |
# |Silt       |-0.000***    |0.004     |0.008     |-0.015***  |-0.049***   |
# |$R^2_m$    |0.393        |0.212     |0.368     |0.362      |0.494       |
# |$R^2_c$    |0.996        |0.915     |0.993     |0.995      |0.997       |
```

The analysis reveals that the capacity-based P pools and the kinetic rate constant are controlled by different sets of soil properties, strongly supporting the hypotheses.

In line with **Hypothesis 2b**, the kinetic capacity parameter, **Desorbable P ($P_{desorb}$)**, showed a highly significant negative relationship with both dithionite-extractable iron ($Fe_d$) and aluminum ($Al_d$). This provides strong evidence that the total pool of free oxides, which represent the primary P sorption surfaces in the soil, is a key factor controlling the size of the readily desorbable P pool.

Also confirming **Hypothesis 2b**, the **Rate Constant (*k*)** was governed by a different set of properties. It was not significantly influenced by the free oxides but instead showed a significant negative relationship with `Clay` content and a positive relationship with organic carbon ($C_{org}$). This clearly distinguishes the kinetic component from the capacity component, suggesting that while oxides control *how much* P can be held, soil texture and organic matter influence *how fast* it can be released.

The standard STP methods showed patterns consistent with **Hypothesis 1b**. **Organic Carbon ($C_{org}$)** had a highly significant positive effect on $P_{AAE10}$, and **pH** had a significant negative effect, as predicted. The relationship of the STP measures with the dithionite-extractable oxides was less consistent than that of $P_{desorb}$, with only $P_{AAE10}$ showing a significant negative link to $Al_d$.

## Predictive Modeling of Agronomic Outcomes {#sec-agronomic-modeling}

To formally evaluate the predictive power of the standard STP methods against the kinetic parameters, a series of linear mixed-effects models were fitted for each of the primary agronomic response variables.

### Predicting Site-Normalized Yield ($Y_{norm}$)

When predicting yield normalized to the site's own potential, the standard STP methods, particularly $P_{CO_2}$, were the most effective predictors (@tbl-ynorm-models). The model including both STP methods ($P_{CO_2}*P_{AAE10}$) achieved a marginal R² of 0.22, explaining a substantial portion of the variance in within-site yield response. The kinetic model also performed well, explaining 16.5% of the variance (marginal R² = 0.165), with the desorbable P pool ($P_{desorb}$) being a highly significant predictor. This indicates that for optimizing yield within a given field, both static and kinetic capacity measures are effective.

```{r}
#| label: tbl-ynorm-models
#| tbl-cap: "Results of linear mixed-effects models predicting Site-Normalized Yield ($Y_{norm}$)."
#| echo: false
#| warning: false
#| message: false

lmer_models_yield_norm <- list(
  "Yn-STP-CO2"   = fit.grud.CO2.Ynorm,
  "Yn-STP-AAE10" = fit.grud.AAE10.Ynorm,
  "Yn-STP-GRUD"  = fit.grud.CO2.AAE10.Ynorm,
  "Yn-Kinetic"   = fit.kin.Ynorm
)
covariate_labels <- c(
  "(Intercept)" = "Intercept",
  "log(soil_0_20_P_CO2)" = "$P_{CO_2}$",
  "log(soil_0_20_P_AAE10)" = "$P_{AAE10}$",
  "k" = "$k$",
  "log(PS)" = "$P_{desorb}$",
  "k:log(PS)" = "$J_0$",
  "log(soil_0_20_P_CO2):log(soil_0_20_P_AAE10)" = "$P_{CO_2} \\times P_{AAE10}$",
  "R2m" = "$R^2_m$",
  "R2c" = "$R^2_c$"
)
model_labels_ynorm <- c(
  "Yn-STP-CO2"   = "$P_{CO_2}$",
  "Yn-STP-AAE10" = "$P_{AAE10}$",
  "Yn-STP-GRUD"  = "$P_{CO_2}*P_{AAE10}$",
  "Yn-Kinetic"   = "$k * P_{desorb}$"
)
results_table_ynorm <- create_coef_table(
  lmer_models_yield_norm,
  covariate_labels = covariate_labels,
  model_labels = model_labels_ynorm
)
knitr::kable(results_table_ynorm, escape = FALSE, row.names = FALSE, format = "markdown")

# Gemini here are the results
# Predictor/Model             |$P_{CO_2}$ |$P_{AAE10}$ |$P_{CO_2}*P_{AAE10}$ |$k * P_{desorb}$ |
# |:---------------------------|:----------|:-----------|:--------------------|:----------------|
# |Intercept                   |1.059***   |0.532***    |1.096***             |0.980            |
# |$k$                         |           |            |                     |2.262            |
# |$J_0$                       |           |            |                     |0.931            |
# |$P_{desorb}$                |           |            |                     |-0.063           |
# |$P_{AAE10}$                 |           |0.120***    |-0.006               |                 |
# |$P_{CO_2}$                  |0.162***   |            |0.137                |                 |
# |$P_{CO_2} \times P_{AAE10}$ |           |            |0.016                |                 |
# |$R^2_m$                     |0.218      |0.198       |0.220                |0.014            |
# |$R^2_c$                     |0.358      |0.474       |0.365                |0.360            |
```


The analysis reveals a clear and striking difference between the predictive power of the standard STP methods and the kinetic parameters for site-normalized yield.

The standard STP methods were highly effective predictors. Both the $P_{CO_2}$ and $P_{AAE10}$ models showed highly significant coefficients and explained a substantial portion of the variance, with marginal R² values of 0.218 and 0.198, respectively. The combined model ($P_{CO_2}*P_{AAE10}$) performed best overall, explaining 22% of the variance fixed effects. These results directly contradict **Hypothesis 1a**, which posited that these static measurements would be weak predictors of yield. For predicting yield relative to a site's own maximum potential, the standard soil tests perform very well.

In stark contrast, the kinetic model (`k * P_desorb`) had virtually no predictive power for $Y_{norm}$. The model's marginal R² was only 0.014, and none of the kinetic parameters—neither the rate constant (*k*), the desorbable pool ($P_{desorb}$), nor their interaction—were statistically significant. This finding strongly refutes **Hypothesis 3** for this specific yield metric. The results suggest that when agronomic potential is evaluated within a single site (the function of site-normalization), the rate of P supply is not the limiting factor; rather, the overall capacity or size of the available P pool, as measured effectively by standard soil tests, is the dominant driver of the yield response.


### Predicting National-Normalized Yield ($Y_{rel}$)

When predicting yield normalized to the national average, a different pattern emerged (@tbl-yrel-models). The kinetic model ($k * P_{desorb}$) was the strongest predictor, achieving a marginal R² of 0.12. Critically, the **rate constant (*k*)** and its interaction with $P_{desorb}$ (representing the initial flux $J_0$) were both significant. In contrast, the standard STP methods, while still significant, explained less variance. This supports the hypothesis that the *speed* of P release (*k*) becomes a more important factor for predicting yield potential across diverse pedoclimatic conditions.

```{r}
#| label: tbl-yrel-models
#| tbl-cap: "Results of linear mixed-effects models predicting National-Normalized Yield ($Y_{rel}$)."
#| echo: false
#| warning: false
#| message: false

lmer_models_yield_rel <- list(
  "Yr-STP-CO2"   = fit.grud.CO2.Yrel,
  "Yr-STP-AAE10" = fit.grud.AAE10.Yrel,
  "Yr-STP-GRUD"  = fit.grud.Yrel,
  "Yr-Kinetic"   = fit.kin.Yrel
)
model_labels_yrel <- c(
  "Yr-STP-CO2"   = "$P_{CO_2}$",
  "Yr-STP-AAE10" = "$P_{AAE10}$",
  "Yr-STP-GRUD"  = "$P_{CO_2}*P_{AAE10}$",
  "Yr-Kinetic"   = "$k * P_{desorb}$"
)
results_table_yrel <- create_coef_table(
  lmer_models_yield_rel,
  covariate_labels = covariate_labels,
  model_labels = model_labels_yrel
)
knitr::kable(results_table_yrel, escape = FALSE, row.names = FALSE, format = "markdown")

# Gemini here the results
# |Predictor/Model             |$P_{CO_2}$ |$P_{AAE10}$ |$P_{CO_2}*P_{AAE10}$ |$k * P_{desorb}$ |
# |:---------------------------|:----------|:-----------|:--------------------|:----------------|
# |Intercept                   |104.862*** |75.343***   |130.274***           |56.375           |
# |$k$                         |           |            |                     |377.498**        |
# |$J_0$                       |           |            |                     |171.507**        |
# |$P_{desorb}$                |           |            |                     |-27.486*         |
# |$P_{AAE10}$                 |           |7.111**     |-6.537               |                 |
# |$P_{CO_2}$                  |8.853**    |            |23.091               |                 |
# |$P_{CO_2} \times P_{AAE10}$ |           |            |-3.110               |                 |
# |$R^2_m$                     |0.074      |0.063       |0.078                |0.022            |
# |$R^2_c$                     |0.569      |0.537       |0.596                |0.439            |
```

### Predicting P-Uptake ($P_{up}$)

For predicting P-Uptake, both the standard STP methods and the kinetic model performed well, explaining a similar amount of variance (@tbl-pexport-models). The model combining both standard tests ($P_{CO_2}*P_{AAE10}$) had the highest marginal R² (0.07). This suggests that for predicting the total amount of P a crop will acquire, measures of the P pool size (capacity) are robust and sufficient.

```{r}
#| label: tbl-pexport-models
#| tbl-cap: "Results of linear mixed-effects models predicting P-Export ($P_{up}$)."
#| echo: false
#| warning: false
#| message: false

lmer_models_export <- list(
  "CO2_Pexport"   = fit.CO2.Pexport,
  "AAE10_Pexport" = fit.AAE10.Pexport,
  "Grud_Pexport"  = fit.grud.Pexport,
  "Kin_Pexport"   = fit.kin.Pexport
)
model_labels_export <- c(
  "CO2_Pexport"   = "$P_{CO_2}$",
  "AAE10_Pexport" = "$P_{AAE10}$",
  "Grud_Pexport"  = "$P_{CO_2}*P_{AAE10}$",
  "Kin_Pexport"   = "$k * P_{desorb}$"
)
results_table_export <- create_coef_table(
  lmer_models_export,
  covariate_labels = covariate_labels,
  model_labels = model_labels_export
)
knitr::kable(results_table_export, escape = FALSE, row.names = FALSE, format = "markdown")

# Gemini, here are the results
# |Predictor/Model             |$P_{CO_2}$ |$P_{AAE10}$ |$P_{CO_2}*P_{AAE10}$ |$k * P_{desorb}$ |
# |:---------------------------|:----------|:-----------|:--------------------|:----------------|
# |Intercept                   |27.522***  |8.090       |30.632*              |29.599***        |
# |$k$                         |           |            |                     |22.622           |
# |$J_0$                       |           |            |                     |11.928           |
# |$P_{desorb}$                |           |            |                     |1.954            |
# |$P_{AAE10}$                 |           |4.824***    |-0.805               |                 |
# |$P_{CO_2}$                  |5.177***   |            |8.069                |                 |
# |$P_{CO_2} \times P_{AAE10}$ |           |            |-0.814               |                 |
# |$R^2_m$                     |0.064      |0.073       |0.065                |0.064            |
# |$R^2_c$                     |0.625      |0.603       |0.623                |0.648            |
```

### Predicting P-Balance ($P_{bal}$)

The most striking result was found when predicting the P-Balance (@tbl-pbalance-models). In stark contrast to the standard STP methods, which showed no significant ability to predict the P-Balance, the kinetic model was a powerful predictor. The kinetic model explained **57% of the variance** in P-Balance (marginal R² = 0.572), with the **Desorbable P pool ($P_{desorb}$)** being the dominant, highly significant predictor. This indicates that the $P_{desorb}$ parameter from the kinetic experiment is a vastly superior measure of the soil's P budget and its response to long-term fertilization compared to standard STP tests.

```{r}
#| label: tbl-pbalance-models
#| tbl-cap: "Results of linear mixed-effects models predicting P-Balance ($P_{bal}$)."
#| echo: false
#| warning: false
#| message: false

lmer_models_balance <- list(
  "CO2_Pbalance"   = fit.CO2.Pbalance,
  "AAE10_Pbalance" = fit.AAE10.Pbalance,
  "Grud_Pbalance"  = fit.grud.Pbalance,
  "Kin_Pbalance"   = fit.kin.Pbalance
)
model_labels_balance <- c(
  "CO2_Pbalance"   = "$P_{CO_2}$",
  "AAE10_Pbalance" = "$P_{AAE10}$",
  "Grud_Pbalance"  = "$P_{CO_2}*P_{AAE10}$",
  "Kin_Pbalance"   = "$k * P_{desorb}$"
)
results_table_balance <- create_coef_table(
  lmer_models_balance,
  covariate_labels = covariate_labels,
  model_labels = model_labels_balance
)
knitr::kable(results_table_balance, escape = FALSE, row.names = FALSE, format = "markdown")

# Gemini here are the results
# |Predictor/Model             |$P_{CO_2}$ |$P_{AAE10}$ |$P_{CO_2}*P_{AAE10}$ |$k * P_{desorb}$ |
# |:---------------------------|:----------|:-----------|:--------------------|:----------------|
# |Intercept                   |4.441      |7.691       |3.649                |43.833***        |
# |$k$                         |           |            |                     |84.993           |
# |$J_0$                       |           |            |                     |33.029           |
# |$P_{desorb}$                |           |            |                     |16.947***        |
# |$P_{AAE10}$                 |           |-0.794      |0.187                |                 |
# |$P_{CO_2}$                  |-0.928     |            |-2.442               |                 |
# |$P_{CO_2} \times P_{AAE10}$ |           |            |0.462                |                 |
# |$R^2_m$                     |0.001      |0.001       |0.001                |0.572            |
# |$R^2_c$                     |0.810      |0.807       |0.811                |0.744            |
```